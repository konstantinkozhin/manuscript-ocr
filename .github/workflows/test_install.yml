name: Test package installation

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  test-user-installation:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11", "3.12"]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Upgrade pip
        run: python -m pip install --upgrade pip

      - name: Install package
        run: |
          pip install .

      - name: Install development dependencies
        run: pip install pytest pytest-cov

      - name: Check for dependency conflicts
        run: pip check

      - name: Test basic import
        run: |
          python -c "from manuscript.detectors import EASTInfer; print('Installation successful')"

      - name: Test PyTorch version
        run: |
          python -c "import torch; print(f'PyTorch: {torch.__version__}, CUDA: {torch.cuda.is_available()}')"

      - name: Run installation tests
        run: pytest tests/test_installation.py -v

      - name: Run all tests with coverage
        run: pytest --cov=src --cov-report=xml

  test-dev-installation:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11"]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Upgrade pip
        run: python -m pip install --upgrade pip

      - name: Install dev dependencies (with GPU PyTorch)
        run: |
          pip install -r requirements-dev.txt

      - name: Check for dependency conflicts
        run: pip check

      - name: Test import with dev setup
        run: |
          python -c "from manuscript.detectors import EASTInfer; print('Dev installation successful')"

      - name: Test GPU PyTorch installation
        run: |
          python -c "import torch; print(f'PyTorch: {torch.__version__}, CUDA: {torch.cuda.is_available()}')"

      - name: Run code quality checks
        run: |
          black --check . || echo "Black formatting needed"
          flake8 . || echo "Flake8 issues found"

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          files: coverage.xml
          token: ${{ secrets.CODECOV_TOKEN }}