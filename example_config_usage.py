#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π –ø—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è TRBAInfer —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
–î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –Ω–æ–≤—ã–π API —Å config.json
"""

import json
import os
from pathlib import Path

def create_example_config():
    """–°–æ–∑–¥–∞–µ—Ç –ø—Ä–∏–º–µ—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏"""
    config = {
        "img_h": 32,
        "img_w": 128,
        "hidden_size": 256,
        "max_len": 40,
        "encoding": "utf-8"
    }
    
    os.makedirs("example/configs", exist_ok=True)
    
    config_path = "example/configs/demo_config.json"
    with open(config_path, 'w', encoding='utf-8') as f:
        json.dump(config, f, indent=4, ensure_ascii=False)
    
    print(f"‚úÖ –°–æ–∑–¥–∞–Ω –ø—Ä–∏–º–µ—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {config_path}")
    return config_path

def example_with_config():
    """–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è TRBAInfer —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π"""
    
    print("üöÄ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è TRBAInfer —Å config.json")
    print("=" * 50)
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–º–µ—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    config_path = create_example_config()
    
    print(f"\nüìã –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:")
    with open(config_path, 'r', encoding='utf-8') as f:
        config = json.load(f)
        for key, value in config.items():
            print(f"  {key}: {value}")
    
    print(f"\nüîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è TRBAInfer:")
    print(f"–¢–µ–ø–µ—Ä—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–µ—Ä–µ–¥–∞—Ç—å —Ç–æ–ª—å–∫–æ –ø—É—Ç–∏ –∫ –º–æ–¥–µ–ª–∏ –∏ –∫–æ–Ω—Ñ–∏–≥—É!")
    
    # –ü—Ä–∏–º–µ—Ä –∫–æ–¥–∞ (–∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π, —Ç–∞–∫ –∫–∞–∫ –Ω–µ—Ç —Ä–µ–∞–ª—å–Ω–æ–π –º–æ–¥–µ–ª–∏)
    example_code = '''
from manuscript import TRBAInfer

# –ù–æ–≤—ã–π API - –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –º–æ–¥–µ–ª–∏ –∏–∑ config.json, charset_path –æ—Ç–¥–µ–ª—å–Ω–æ
recognizer = TRBAInfer(
    model_path="path/to/your/model.pth",
    config_path="example/configs/demo_config.json",
    charset_path="path/to/charset.txt"  # –û—Ç–¥–µ–ª—å–Ω–æ, —Ç.–∫. –º–æ–∂–µ—Ç –±—ã—Ç—å –≥–¥–µ —É–≥–æ–¥–Ω–æ
)

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã img_h, img_w, hidden_size –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
# charset_path –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è —è–≤–Ω–æ –¥–ª—è –±–æ–ª—å—à–µ–π –≥–∏–±–∫–æ—Å—Ç–∏

# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–∞–∫ –æ–±—ã—á–Ω–æ
text = recognizer.predict(image)
print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {text}")
'''
    
    print(example_code)
    
    print("‚ú® –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –Ω–æ–≤–æ–≥–æ API:")
    print("  ‚Ä¢ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –º–æ–¥–µ–ª–∏ —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω—ã –≤ config.json")  
    print("  ‚Ä¢ –ù–µ –Ω—É–∂–Ω–æ –¥—É–±–ª–∏—Ä–æ–≤–∞—Ç—å img_h, img_w, hidden_size –≤ –∫–æ–¥–µ")
    print("  ‚Ä¢ –õ–µ–≥–∫–æ –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç—å—Å—è –º–µ–∂–¥—É —Ä–∞–∑–Ω—ã–º–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è–º–∏")
    print("  ‚Ä¢ charset_path –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è —è–≤–Ω–æ –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –≥–∏–±–∫–æ—Å—Ç–∏")
    print("  ‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ")

if __name__ == "__main__":
    example_with_config()