"""
–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è OCRPipeline –¥–ª—è –º–∞—Å—Å–æ–≤–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏–∑ –ø–∞–ø–∫–∏.
–í–∫–ª—é—á–∞–µ—Ç –¥–µ—Ç–µ–∫—Ü–∏—é –∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏.
"""

import os
import time
import glob
from src.manuscript.detectors._east import EASTInfer
from src.manuscript.recognizers.trba import TRBAInfer
from src.manuscript.pipeline import OCRPipeline


def main():
    # –ü—É—Ç–∏ –∫ –º–æ–¥–µ–ª—è–º
    recognizer_model_path = (
        "C:\\Users\\USER\\Desktop\\OCR_MODELS\\exp1_model_64\\best_acc_weights.pth"
    )
    config_path = "C:\\Users\\USER\\Desktop\\OCR_MODELS\\exp1_model_64\\config.json"

    # –ü–∞–ø–∫–∞ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
    images_folder = "C:\\shared\\data0205\\Archives020525\\test_images"

    # –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    image_extensions = ["*.jpg", "*.jpeg", "*.png", "*.bmp", "*.tiff", "*.tif"]

    # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ –ø–∞–ø–∫–∏
    image_files = set()  # –ò—Å–ø–æ–ª—å–∑—É–µ–º set –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –¥—É–±–ª–µ–π
    for ext in image_extensions:
        image_files.update(glob.glob(os.path.join(images_folder, ext)))
        image_files.update(glob.glob(os.path.join(images_folder, ext.upper())))

    image_files = sorted(list(image_files))  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫

    if not image_files:
        print(f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –ø–∞–ø–∫–µ: {images_folder}")
        print("–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: jpg, jpeg, png, bmp, tiff, tif")
        return

    print(f"–ù–∞–π–¥–µ–Ω–æ {len(image_files)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
    print(f"–ü–∞–ø–∫–∞: {images_folder}")

    print("\n–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OCR Pipeline...")

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞
    print("–ó–∞–≥—Ä—É–∑–∫–∞ –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞ EAST...")
    start_time = time.time()
    detector = EASTInfer()
    detector_time = time.time() - start_time
    print(f"–î–µ—Ç–µ–∫—Ç–æ—Ä –∑–∞–≥—Ä—É–∂–µ–Ω –∑–∞ {detector_time:.2f} —Å–µ–∫")

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞—Ç–µ–ª—è
    print("–ó–∞–≥—Ä—É–∑–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞—Ç–µ–ª—è TRBA...")
    start_time = time.time()
    recognizer = TRBAInfer(
        model_path=recognizer_model_path,
        config_path=config_path,
    )
    recognizer_time = time.time() - start_time
    print(f"–†–∞—Å–ø–æ–∑–Ω–∞–≤–∞—Ç–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω –∑–∞ {recognizer_time:.2f} —Å–µ–∫")

    # –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–π–ø–ª–∞–π–Ω–∞
    pipeline = OCRPipeline(detector=detector, recognizer=recognizer, min_text_size=10)

    print("\n" + "=" * 80)
    print("–ù–ê–ß–ê–õ–û –ú–ê–°–°–û–í–û–ô –û–ë–†–ê–ë–û–¢–ö–ò")
    print("=" * 80)
    print("üí° –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
    print("üìä –ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–∞–∂–¥—ã–µ 10 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")

    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –≤—Å–µ—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    total_images = 0
    total_words_found = 0
    total_words_recognized = 0
    total_processing_time = 0
    failed_images = []

    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    for i, image_path in enumerate(image_files, 1):
        print(f"\nüì∑ [{i}/{len(image_files)}] {os.path.basename(image_path)}")
        print(f"    üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...")

        try:
            # –ó–∞–º–µ—Ä –≤—Ä–µ–º–µ–Ω–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–¥–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            start_time = time.time()
            print(f"    üîç –î–µ—Ç–µ–∫—Ü–∏—è —Ç–µ–∫—Å—Ç–∞...")

            # –°–Ω–∞—á–∞–ª–∞ —Ç–æ–ª—å–∫–æ –¥–µ—Ç–µ–∫—Ü–∏—è, —á—Ç–æ–±—ã –ø–æ–Ω—è—Ç—å –≥–¥–µ –∑–∞–≤–∏—Å–∞–µ—Ç
            detection_start = time.time()
            detection_result = pipeline.detector.infer(image_path, vis=False)
            detection_time = time.time() - detection_start
            print(f"    ‚úÖ –î–µ—Ç–µ–∫—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞ {detection_time:.2f} —Å–µ–∫")

            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –æ–±–ª–∞—Å—Ç–∏
            total_detected = sum(len(block.words) for block in detection_result.blocks)
            print(f"    üìä –ù–∞–π–¥–µ–Ω–æ {total_detected} —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –æ–±–ª–∞—Å—Ç–µ–π")

            if total_detected > 0:
                print(f"    üî§ –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞...")
                recognition_start = time.time()
                result_page = pipeline.process(image_path, recognize_text=True)
                recognition_time = time.time() - recognition_start
                print(f"    ‚úÖ –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ –∑–∞ {recognition_time:.2f} —Å–µ–∫")
            else:
                print(f"    ‚è≠Ô∏è  –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ (–Ω–µ—Ç –æ–±–ª–∞—Å—Ç–µ–π)")
                result_page = detection_result

            processing_time = time.time() - start_time

            total_processing_time += processing_time
            total_images += 1

            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–ª–æ–≤–∞
            words_in_image = 0
            recognized_in_image = 0

            for block in result_page.blocks:
                for word in block.words:
                    words_in_image += 1
                    if word.text:
                        recognized_in_image += 1

            total_words_found += words_in_image
            total_words_recognized += recognized_in_image

            # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è —ç—Ç–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            print(f"   ‚è±Ô∏è  –í—Ä–µ–º—è: {processing_time:.2f} —Å–µ–∫")
            print(
                f"   üìä –ù–∞–π–¥–µ–Ω–æ: {words_in_image} –æ–±–ª–∞—Å—Ç–µ–π, —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ: {recognized_in_image} —Å–ª–æ–≤"
            )

            # –ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–∞–∂–¥—ã–µ 10 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
            if i % 10 == 0:
                avg_time = (
                    total_processing_time / total_images if total_images > 0 else 0
                )
                remaining = len(image_files) - i
                eta = remaining * avg_time
                print(f"\nüìà –ü–†–û–ú–ï–ñ–£–¢–û–ß–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê [{i}/{len(image_files)}]:")
                print(f"   ‚è±Ô∏è –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {avg_time:.2f} —Å–µ–∫")
                print(f"   üïê –ü—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è –¥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: {eta/60:.1f} –º–∏–Ω")
                print(f"   üìä –û–±—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å: {(i/len(image_files)*100):.1f}%")

            if recognized_in_image > 0:
                words_per_sec = recognized_in_image / processing_time
                time_per_word = processing_time / recognized_in_image * 1000
                print(
                    f"   üèÉ –°–∫–æ—Ä–æ—Å—Ç—å: {words_per_sec:.1f} —Å–ª–æ–≤/—Å–µ–∫, {time_per_word:.1f} –º—Å/—Å–ª–æ–≤–æ"
                )

                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç (–ø–µ—Ä–≤—ã–µ 5 —Å–ª–æ–≤)
                recognized_words = []
                for block in result_page.blocks:
                    for word in block.words:
                        if word.text:
                            recognized_words.append(word.text)

                preview = " ".join(recognized_words[:5])
                if len(recognized_words) > 5:
                    preview += "..."
                print(f"   üìù –¢–µ–∫—Å—Ç: {preview}")
            else:
                print(f"   ‚ùå –¢–µ–∫—Å—Ç –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω")

        except KeyboardInterrupt:
            print(
                f"\n‚ö†Ô∏è –ü—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º! –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {i-1} –∏–∑ {len(image_files)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"
            )
            break
        except Exception as e:
            print(f"   ‚ùå –û–®–ò–ë–ö–ê: {e}")
            print(f"   üìÅ –§–∞–π–ª: {image_path}")
            failed_images.append((image_path, str(e)))

            # –ï—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –æ—à–∏–±–æ–∫ –ø–æ–¥—Ä—è–¥, –≤–æ–∑–º–æ–∂–Ω–æ –ø—Ä–æ–±–ª–µ–º–∞ —Å –º–æ–¥–µ–ª—å—é
            if len(failed_images) >= 5 and len(failed_images) > total_images:
                print(
                    f"‚ö†Ô∏è –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –æ—à–∏–±–æ–∫ ({len(failed_images)}). –í–æ–∑–º–æ–∂–Ω–∞ –ø—Ä–æ–±–ª–µ–º–∞ —Å –º–æ–¥–µ–ª—å—é!"
                )
                break

    # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    print("\n" + "=" * 80)
    print("–ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê")
    print("=" * 80)

    if total_images > 0:
        avg_time_per_image = total_processing_time / total_images
        print(f"üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {total_images}")
        print(f"‚è±Ô∏è  –û–±—â–µ–µ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {total_processing_time:.2f} —Å–µ–∫")
        print(f"üì∑ –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {avg_time_per_image:.2f} —Å–µ–∫")
        print(f"üìù –í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ –æ–±–ª–∞—Å—Ç–µ–π: {total_words_found}")
        print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ —Å–ª–æ–≤: {total_words_recognized}")

        if total_words_recognized > 0:
            overall_words_per_sec = total_words_recognized / total_processing_time
            overall_time_per_word = (
                total_processing_time / total_words_recognized * 1000
            )
            recognition_rate = (
                (total_words_recognized / total_words_found) * 100
                if total_words_found > 0
                else 0
            )

            print(
                f"üèÉ –û–±—â–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è: {overall_words_per_sec:.1f} —Å–ª–æ–≤/—Å–µ–∫"
            )
            print(f"‚ö° –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –Ω–∞ —Å–ª–æ–≤–æ: {overall_time_per_word:.1f} –º—Å")
            print(f"üéØ –ü—Ä–æ—Ü–µ–Ω—Ç —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è: {recognition_rate:.1f}%")

            # –ü—Ä–æ–ø—É—Å–∫–Ω–∞—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å
            images_per_min = 60 / avg_time_per_image
            words_per_min = overall_words_per_sec * 60
            print(f"üìà –ü—Ä–æ–ø—É—Å–∫–Ω–∞—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å:")
            print(f"   - {images_per_min:.1f} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ –º–∏–Ω—É—Ç—É")
            print(f"   - {words_per_min:.0f} —Å–ª–æ–≤ –≤ –º–∏–Ω—É—Ç—É")

    if failed_images:
        print(f"\n‚ùå –û—à–∏–±–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ ({len(failed_images)}):")
        for img_path, error in failed_images:
            print(f"   {os.path.basename(img_path)}: {error}")

    print("\n‚úÖ –ú–∞—Å—Å–æ–≤–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")


if __name__ == "__main__":
    main()
