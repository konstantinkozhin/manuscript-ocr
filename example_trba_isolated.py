"""
–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ TRBAInfer –∏–∑ trba –º–æ–¥—É–ª—è.
–ü—Ä–æ—Å—Ç–æ–π API —Å —Ç—Ä–µ–º—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏: model_path, charset_path, config_path.
"""

import os
from src.manuscript.recognizers import TRBAInfer

def main():
    # –ü—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º –º–æ–¥–µ–ª–∏
    model_path = "C:\\Users\\USER\\Desktop\\OCR_MODELS\\exp_4_model_32\\best_acc_weights.pth"  # –ø—É—Ç—å –∫ –≤–µ—Å–∞–º –º–æ–¥–µ–ª–∏
    charset_path = "src/manuscript/recognizers/trba/configs/charset.txt"          # –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å —Å–∏–º–≤–æ–ª–∞–º–∏
    config_path = "C:\\Users\\USER\\Desktop\\OCR_MODELS\\exp_4_model_32\\config.json"          # –ø—É—Ç—å –∫ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤
    if not os.path.exists(model_path):
        print(f"‚ùå –§–∞–π–ª –º–æ–¥–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω: {model_path}")
        return
    
    if not os.path.exists(charset_path):
        print(f"‚ùå –§–∞–π–ª charset –Ω–µ –Ω–∞–π–¥–µ–Ω: {charset_path}")
        return
        
    if not os.path.exists(config_path):
        print(f"‚ùå –§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω: {config_path}")
        return
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–µ–ª–∏ - —Ç–æ–ª—å–∫–æ 3 –ø–∞—Ä–∞–º–µ—Ç—Ä–∞!
        recognizer = TRBAInfer(
            model_path=model_path,
            charset_path=charset_path,
            config_path=config_path
        )
        
        print("‚úÖ TRBAInfer —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
        # –ü—Ä–∏–º–µ—Ä —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        image_path = "C:\\Users\\USER\\Desktop\\archive_25_09\\dataset\\printed\\val\\img\\images_group_1_1017_7866.png"
        
        if os.path.exists(image_path):
            # –ü—Ä–æ—Å—Ç–æ–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ - –≤—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫, –±–µ—Ä–µ–º [0]
            results = recognizer.predict(image_path)
            text, confidence = results[0]
            print(f"üìù –†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç: '{text}' (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence:.3f})")
            
            # –ü–∞–∫–µ—Ç–Ω–æ–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ
            images = [image_path, image_path]  # –ø—Ä–∏–º–µ—Ä —Å –¥–≤—É–º—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
            results = recognizer.predict(images)
            print(f"üì¶ –ü–∞–∫–µ—Ç–Ω–æ–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ:")
            for i, (text, conf) in enumerate(results):
                print(f"   {i+1}: '{text}' (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {conf:.3f})")
            
            print(f"‚öôÔ∏è  –ò—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞:")
            print(f"   - max_length: {recognizer.max_length}")
            print(f"   - hidden_size: {recognizer.hidden_size}")
            print(f"   - img_size: {recognizer.img_h}x{recognizer.img_w}")
            
        else:
            print(f"‚ö†Ô∏è  –¢–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ: {image_path}")
            print("üí° –°–æ–∑–¥–∞–π—Ç–µ —Ç–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–ª–∏ —É–∫–∞–∂–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø—É—Ç—å")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")

if __name__ == "__main__":
    main()